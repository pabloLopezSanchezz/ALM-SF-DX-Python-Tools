name: Pipeline Manual Deploy to Environments

# Workflow run name
run-name: Workflow run No - ${{ github.run_number }} by @${{ github.actor }}

# Workflow triggers
on:
  workflow_dispatch:
    inputs:
      sourceBranch:
        description: "Source Branch"
        required: true
        type: string
      targetBranch:
        description: "Target Branch"
        required: true
        type: string
      getPRNumber:
        description: "Enter the Pull Request Number"
        required: false
        type: number
      sfDeploymentFlag:
        description: "Salesforce Metadata Deployment"
        required: true
        default: true
        type: boolean
      getUnitTests:
        description: "Test classes to execute"
        required: false
        type: string
      targetEnv:
        description: "Target Environment for Deployment"
        default: "None"
        type: choice
        required: true
        options:
          - None
          - SF_HOTFIX_NCINO
          - SF_UAT_NCINO
          - SF_SIT_NCINO
          - SF_INT_NCINO
          - SF_PROD
          - SF_PRE
          - SF_INT

# Environment Variables
env:
  GIT_USER_NAME: github
  GIT_USER_EMAIL: githubactions@santader.com

jobs:
  installation_authenticate_deploy:
    runs-on: ubuntu-latest
    # Environment variables set
    environment: ${{ inputs.targetEnv }}
    if: (github.event_name == 'workflow_dispatch')
    env:
      TARGET_ENVIRONMENT: ${{inputs.targetEnv}}
      SOURCE_BRANCH: ${{inputs.sourceBranch}}
      TARGET_BRANCH: ${{inputs.targetBranch}}
      PR_USERNAME: ${{github.actor}}
      PR_NUMBER: ${{inputs.getPRNumber}}
      SF_METADATA_DEPLOY: ${{inputs.sfDeploymentFlag}}
      UNIT_TESTS: ${{inputs.getUnitTests}}
      GH_TOKEN: ${{secrets.SF_GITHUB_TOKEN}}
    steps:
      # Checkout the current repository depth 0
      - name: Checkout Repository depth 0
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Checkout acct-scripts repo
      - name: Checkout Python_Scripts unrelated Histories
        uses: actions/checkout@v3
        with:
          repository: santander-group-scib-ng/cib-alexan-python-libs
          token: ${{ secrets.SF_GITHUB_TOKEN }}
          path: ./acct-scripts
          ref: feature/unrelatedHistory

      # Install requirements.txt from acct-scripts
      - name: Install requirements.txt
        run: |
          ls -l
          node --version
          python --version
          pip --version
          python3 -m pip install -r "./acct-scripts/requirements.txt"

      # Create a PR comment thread
      - name: Create PR comment Thread
        run: |
          echo -e '## **Starting build #[${{github.run_number}}][1]**
            ------
            [1]: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}' > comments.txt
          gh issue comment ${{ env.PR_NUMBER }} -F comments.txt

      # Install SF CLI V2
      - name: Install SF CLI
        run: |
          wget https://developer.salesforce.com/media/salesforce-cli/sf/channels/stable/sf-linux-x64.tar.xz
          mkdir -p ~/cli/sf
          ls -la
          tar xJf sf-linux-x64.tar.xz -C ~/cli/sf --strip-components 1
          echo "$HOME/cli/sf/bin" >> $GITHUB_PATH
          echo The PATH is $GITHUB_PATH
          ~/cli/sf/bin/sf version

      # Install SFDX-Scanner
      - name: Install SFDX-Scanner
        if: env.SF_METADATA_DEPLOY == 'true'
        run: |
          sfdx plugins:install @salesforce/sfdx-scanner

      # Checkout acct-scripts repo
      - name: Checkout Python_Scripts Unrelated Histories
        uses: actions/checkout@v3
        with:
          repository: santander-group-scib-ng/cib-alexan-python-libs
          token: ${{ secrets.SF_GITHUB_TOKEN }}
          path: ./acct-scripts
          ref: feature/unrelatedHistory

      # Git Version Check
      - name: Git Version Check
        run: |
          # sudo apt update
          # sudo apt-get install -y git
          git --version

      # Update comment in PR Thread: OS dependencies installed
      - name: Update Comment Thread - Dependencies installed
        run: |
          echo "+ All Dependencies Installed :white_check_mark:" >> comments.txt
          gh issue comment ${{ env.PR_NUMBER }} --edit-last -F comments.txt

      # Store Auth URL
      - name: Store the SFDX Auth URL
        run: |
          echo ${{secrets.SFDX_AUTH_URL}} > ./authFile.txt
          secretFileSize=$(wc -c "./authFile.txt" | awk '{print $1}')
          if [ $secretFileSize == 1 ]; then
            echo "Missing authFile secret. Is this workflow running on a fork?";
            exit 1;
          fi

      # Authenticate with Auth URL
      - name: Authenticate SFDX Instance
        id: sfdxAuthenticate
        run: |
          echo "Logging as ${{ secrets.SFDXUSERNAME }}"

          authResponse=$(sf org login sfdx-url --sfdx-url-file ./authFile.txt --json)
          statusCode=$(jq -r '.status' <<< $authResponse)

          # echo $authResponse
          echo $statusCode

          if [[ "$statusCode" != "0" ]]; then
            authenticationMessage=$(jq -r '.message' $authResponse)
            echo "Error found: $authenticationMessage"
            echo "$authenticationMessage"
            exit 1
          fi

      # Update comment in PR Thread: Salesforce-Auth-Success
      - name: Update Comment Thread - Salesforce authentication Successful
        if: ((github.event_name == 'workflow_dispatch') && (steps.sfdxAuthenticate.outcome =='success') && env.PR_NUMBER != '')
        run: |
          echo "+ Successful Salesforce Authentication :white_check_mark:" >> comments.txt
          gh issue comment ${{ env.PR_NUMBER }} --edit-last -F comments.txt

      # Update comment in PR Thread: Salesforce-Auth-Failed
      - name: Update Comment Thread - Salesforce authentication failed
        if: ((github.event_name == 'workflow_dispatch') && (steps.sfdxAuthenticate.outcome =='failure') && env.PR_NUMBER != '')
        run: |
          echo "+ Salesforce Authentication Failed :x:" >> comments.txt
          gh issue comment ${{ env.PR_NUMBER }} --edit-last -F comments.txt

      # Disable source tracking
      - name: Source Tracking
        run: |
          sf org disable tracking --target-org ${{secrets.SFDXUSERNAME}}

      # Cleanup Describe.log
      - name: Cleanup describe.log
        run: |
          ls -la
          sudo rm -rf describe.log
          ls -la

      # Generate Describe Log
      - name: Generate Describe Log
        run: |
          sf org list metadata-types --target-org ${{secrets.SFDXUSERNAME}} --output-file describe.log --api-version ${{secrets.API_VERSION}}

      # Configure a global user for Git
      - name: Configure Global User for Git
        run: |
          git config --global user.email ${{ env.GIT_USER_NAME }}
          git config --global user.name ${{ env.GIT_USER_EMAIL }}
          git config --global diff.renameLimit 5000
          git config core.quotepath off

      # Checkout the python scripts with path added
      - uses: actions/checkout@v3
        name: Checkout Python_Scripts Unrelated Histories
        with:
          repository: santander-group-scib-ng/cib-alexan-python-libs
          token: ${{ secrets.SF_GITHUB_TOKEN }}
          path: ./acct-scripts
          ref: feature/unrelatedHistory

      # Run the MergeDX
      - name: MergerDX
        id: MergerDX
        if: env.SF_METADATA_DEPLOY == 'true'
        continue-on-error: true
        run: |
          set -x
          python3 ./acct-scripts/mergerDX/merger.py merge_delta -s ${{env.SOURCE_BRANCH}} -t ${{env.TARGET_BRANCH}} -a ${{secrets.API_VERSION}} 2>&1 | tee output.txt
          EXIT_CODE=${PIPESTATUS[0]}
          if [ $EXIT_CODE -eq 0 ] && [ $(ls srcToDeploy | wc -l) -ne 0 ]; then
            echo "Success in MergeDX"
            zip -r srcToDeploy.zip ./srcToDeploy/
            git rev-parse --verify HEAD
          elif [ $EXIT_CODE -eq 113 ]; then
            OUTPUT=$(grep -P "^\{.*\}$" output.txt)
            echo "::set-output name=script_output::$OUTPUT"
            echo "+ Duplicate Label found: $OUTPUT :x:" >> comment.txt
            gh pr comment ${{ env.PR_NUMBER }} --edit-last -F comment.txt
            exit 1
          else
            echo "::warning:: Failure in MergeDX: The srcToDeploy.zip is EMPTY(i.e. No New Code Changes Detected)"
            exit 1
          fi

      # Update a comment in PR Thread
      - name: Update Comment Thread - Delta Package-Not Built
        if: (steps.MergerDX.outcome != 'success' && (github.event_name == 'workflow_dispatch') && env.PR_NUMBER != '')
        run: |
          echo "+ Salesforce Delta Package Not Built :warning:" >> comments.txt
          gh issue comment ${{ env.PR_NUMBER }} --edit-last -F comments.txt

      # Echo if MergerDX script fails
      - name: Pipeline Delta Package did not built
        if: (steps.MergerDX.outcome != 'success')
        run: |
          echo "::warning::Step MegerDX Failed: Salesforce Delta Package Not Built"

      # Upload the output to ./srcToDeploy.zip
      - uses: actions/upload-artifact@v4
        if: (steps.MergerDX.outcome == 'success')
        name: Artfifact Upload - ./srcToDeploy.zip
        with:
          name: srcToDeploy.zip
          path: ./srcToDeploy.zip
          retention-days: 15

      # Update a comment PR Thread for Build-Success
      - name: Update Comment Thread - Delta Package Built Successfully
        if: ((github.event_name == 'workflow_dispatch') && steps.MergerDX.outcome == 'success' && env.PR_NUMBER != '')
        run: |
          echo -e "+ Salesforce Delta Package Built Successfully srcToDeploy.zip :white_check_mark:\n Navigate to workflow run URL: [1] :white_check_mark:" >> comments.txt
          gh issue comment ${{ env.PR_NUMBER }} --edit-last -F comments.txt

      # Run the Nomenclature script on ./srcToDeploy
      - name: Nomenclature Check
        if: (steps.MergerDX.outcome == 'success')
        id: nomenclatureValidation
        run: |
          python3 ./acct-scripts/nomenclatureChecker/nomenclature.py -p ./srcToDeploy

      # Upload Artifact nomenclature-errors.html
      - uses: actions/upload-artifact@v4
        name: Artifact Upload - ./nomenclature-errors.html
        if: (steps.MergerDX.outcome == 'success')
        with:
          name: nomenclatureErrorsReport
          path: ./nomenclature-errors.html
          retention-days: 15

      # Update a comment in PR Thread: Nomenclature-Success
      - name: Update Comment Thread - Nomenclature validation build succesfully
        if: (steps.nomenclatureValidation.outcome == 'success' && (github.event_name == 'workflow_dispatch') && env.PR_NUMBER != '')
        run: |
          echo "+ Nomenclature validation build succesfully :white_check_mark:" >> comments.txt
          gh issue comment ${{ env.PR_NUMBER }} --edit-last -F comments.txt

      # Update a comment in PR Thread: Nomenclature-Fails
      - name: Update Comment Thread - Nomenclature validation failed
        if: (steps.MergerDX.outcome == 'success' && steps.nomenclatureValidation.outcome != 'success' && github.event_name == 'workflow_dispatch' && env.PR_NUMBER != '')
        run: |
          echo "+ Nomenclature validation failed :x:" >> comments.txt
          gh issue comment ${{ env.PR_NUMBER }} --edit-last -F comments.txt

      # Scan the code with SFDX-scanner
      - name: Run SFDX Scanner
        id: sfdxScanner
        if: (env.SF_METADATA_DEPLOY == 'true' && steps.MergerDX.outcome == 'success')
        run: |
          ruleSetPath="./acct-scripts/pmd/rules.xml"
          reportPath="sfdxScannerReport.html"
          deployFolderPath="srcToDeploy"

          sfdx scanner:run -f html -o $reportPath -t $deployFolderPath --pmdconfig $ruleSetPath 

          exitStatus=$(echo $?)

      # Upload sfdxScannerReport.html
      - uses: actions/upload-artifact@v4
        if: (steps.sfdxScanner.outcome == 'success')
        name: Artifact Upload - ./sfdxScannerReport.html
        with:
          name: sfdxScannerReport.html
          path: ./sfdxScannerReport.html
          retention-days: 15

      # Get unit tests as input from user
      - name: Find Unit Tests
        if: (steps.MergerDX.outcome == 'success')
        id: regex-match
        run: |
          echo ${{env.UNIT_TESTS}}

      # Update a comment in PR Thread: If unit tests are defined otherwise skip this step
      - name: Update Comment Thread - Unit Tests to be run
        if: (env.UNIT_TESTS != '' && (github.event_name == 'workflow_dispatch') && env.PR_NUMBER != '')
        run: |
          echo "+ Unit Tests to be run: ${{ env.UNIT_TESTS }}" >> comments.txt
          gh issue comment ${{ env.PR_NUMBER }} --edit-last -F comments.txt

      # Setting up sfdx force:source:deploy based on the unit tests for the validate and deploy
      # If unit tests are present then first run those unit test and then deploy
      # If unit tests are absent then print No tests to run
      - name: Test Composition
        # id: testString
        # echo ::set-output name=TEST_STRING::$testString
        run: |
          testToRun='${{env.UNIT_TESTS}}';
          if [ -z "$testToRun" ]; then
            testString=''
            echo "No Test to run"
          else
            testString='-l RunSpecifiedTests -r ${{env.UNIT_TESTS}}'
          fi
          echo "TEST_STRING=$testString" >> $GITHUB_ENV

      # Load specific Variables to this Enviroment
      - name: SFDX Load Dynamic Vars
        id: sfdxDynoVar
        if: (steps.MergerDX.outcome == 'success')
        continue-on-error: true
        run: |
          python3 ./acct-scripts/loadDynoVars/loadDynoVar.py ${{ env.TARGET_ENVIRONMENT }}
          echo "SFDX Load Dynamic Vars Completed"

      # SFDX deploy cmd with check only flag, for unit tests execution
      - name: SFDX Validate
        id: sfdxValidate
        if: (env.SF_METADATA_DEPLOY == 'true' && steps.MergerDX.outcome == 'success')
        continue-on-error: true
        run: |
          # REVIEW TRY TO USE SF INSTEAD SFDX
          # sf project deploy start --target-org ${{secrets.SFDXUSERNAME_SANDBOX}} --source-dir srcToDeploy ${{env.TEST_STRING}} --api-version ${{secrets.API_VERSION}} --wait 90 --dry-run --json > validate_SANDBOX.json
          sfdx force:source:deploy --targetusername ${{secrets.SFDXUSERNAME}} --sourcepath srcToDeploy ${{env.TEST_STRING}} --apiversion ${{secrets.API_VERSION}} --wait 90 -c --json > validate.json
          # sf project deploy validate --target-org ${{secrets.SFDXUSERNAME_SANDBOX}} --source-dir srcToDeploy ${{env.TEST_STRING}} --api-version ${{secrets.API_VERSION}} --wait 90 --json > validate_SANDBOX.json

      # Upload the output of force:sorce:deploy cmd in json file
      - name: Artifact Upload - ./validate.json
        id: sfdxValidateArtifact
        if: (steps.sfdxValidate.outcome != 'skipped')
        uses: actions/upload-artifact@v4
        with:
          name: validate.json
          path: ./validate.json
          retention-days: 15

      # Generate html report based on validate.json
      - name: SFDX Validate LogParser
        id: sfdxLogParser
        if: (steps.sfdxValidate.outcome != 'skipped')
        continue-on-error: true
        run: |
          python3 ./acct-scripts//logParserDX/dxLogParser.py logParser -p validate.json -O validate-Report.html

      # Upload the sf validation report
      - name: Artifact Upload - ./validate-Report.html
        if: (steps.sfdxValidate.outcome != 'skipped')
        uses: actions/upload-artifact@v4
        with:
          name: validate-Report.html
          path: ./validate-Report.html
          retention-days: 7

      # Parse json to extract Status and ID
      - name: Parse json output
        #echo ::set-output name=SfdxValidateStatusCode::$statusCode
        #echo ::set-output name=resultID::$resultId
        id: parseJson
        if: (steps.sfdxValidateArtifact.outcome == 'success')
        run: |
          statusCode=$(jq -r '.status' validate.json)
          echo $statusCode

          echo "SfdxValidateStatusCode=$statusCode" >> $GITHUB_ENV

          if [[ "$statusCode" == "0" ]]; then
            resultId=$(jq -r '.result.id' validate.json)
            
            echo "resultID=$resultId" >> $GITHUB_ENV
          fi

      # Update a comment in PR Thread: Validation-success
      - name: Update Comment Thread - SFDX Validate Success
        if: (steps.parseJson.outcome == 'success' && steps.sfdxValidate.outcome == 'success' && github.event_name == 'workflow_dispatch' && env.PR_NUMBER != '')
        run: |
          echo "+ Salesforce Validation Successful :white_check_mark:" >> comments.txt
          gh issue comment ${{ env.PR_NUMBER }} --edit-last -F comments.txt

      # Update a comment in PR Thread: Validation-failed
      - name: Update comment - SFDX Validate Failed
        if: (steps.parseJson.outcome == 'success' && steps.sfdxValidate.outcome == 'failure' && github.event_name == 'workflow_dispatch' && env.PR_NUMBER != '')
        run: |
          echo "+ Salesforce Validation Failed :x:" >> comments.txt
          gh issue comment ${{ env.PR_NUMBER }} --edit-last -F comments.txt

      # Stop the pipeline because unit tests are failed
      - name: Cancel Pipeline Validate Fails
        if: (steps.parseJson.outcome == 'success' && env.SfdxValidateStatusCode != 0)
        run: |
          echo "::error::SFDX Validation Failed: Stop pipeline"
          exit 1

      # Run force:source:deploy if unit tests executes successfully
      - name: SFDX Quick Deploy
        id: sfdxQuickDeploy
        if: (env.SF_METADATA_DEPLOY == 'true' && steps.parseJson.outcome == 'success' && env.SfdxValidateStatusCode == 0 && env.TEST_STRING != '')
        run: |
          sfdx force:source:deploy -u ${{secrets.SFDXUSERNAME}} -q ${{env.resultID}} --apiversion ${{secrets.API_VERSION}} --wait 90 --json > deploy.json

      # Run force:source:deploy if unit tests not present
      - name: SFDX Deploy
        id: sfdxDeploy
        if: (env.SF_METADATA_DEPLOY == 'true' && steps.parseJson.outcome == 'success' && env.SfdxValidateStatusCode == 0 && env.TEST_STRING == '')
        run: |
          sfdx force:source:deploy --targetusername ${{secrets.SFDXUSERNAME}} --sourcepath srcToDeploy ${{env.TEST_STRING}} --apiversion ${{secrets.API_VERSION}} --wait 90 --json > deploy.json

      # Update a comment in PR Thread: Deployment-success
      - name: Update Comment Thread - SFDX Deploy comment Success
        if: ((steps.sfdxDeploy.outcome == 'success' || steps.sfdxQuickDeploy.outcome == 'success') && (github.event_name == 'workflow_dispatch') && env.PR_NUMBER != '')
        run: |
          echo "+ Salesforce Deployment Successful :white_check_mark:" >> comments.txt
          gh issue comment ${{ env.PR_NUMBER }} --edit-last -F comments.txt

      # Upload the output of force:sorce:deploy cmd in json file
      - name: Artifact Upload - ./deploy.json
        if: (steps.sfdxDeploy.outcome == 'success' || steps.sfdxQuickDeploy.outcome == 'success')
        uses: actions/upload-artifact@v4
        with:
          name: deploy.json
          path: ./deploy.json
          retention-days: 15

      # Update a comment in PR Thread: Deployment-failed
      - name: Update Comment Thread - SFDX Deploy Failure
        if: ((steps.sfdxDeploy.outcome == 'failure' || steps.sfdxQuickDeploy.outcome == 'failure') && (github.event_name == 'workflow_dispatch') && env.PR_NUMBER != '')
        run: |
          echo "+ Salesforce Deployment Failed :x:" >> comments.txt
          gh issue comment ${{ env.PR_NUMBER }} --edit-last -F comments.txt

      # Stop the pipeline if force:source:deploy fails
      - name: Cancel Pipeline Deploy Fails
        if: (steps.sfdxDeploy.outcome == 'failure' || steps.sfdxQuickDeploy.outcome == 'failure')
        run: |
          echo "::error::SFDX Deploy Failed: Stop pipeline"
          exit 1

      # Apporve Pull Request
      - name: Approve PR
        id: ApprovePR
        if: ((steps.sfdxDeploy.outcome == 'success' || steps.sfdxQuickDeploy.outcome == 'success') && (github.event_name == 'workflow_dispatch') && env.PR_NUMBER != '')
        continue-on-error: true
        run: |
          echo "Login: @${{ env.PR_USERNAME }}"

          if [[ "${{ env.PR_USERNAME }}" == "x147596-sgt_sangroup" ]]; then
            gh pr review ${{ env.PR_NUMBER }} --comment --body "Pull Request Review by GitHub-Actions[Bot]
            ----
            @${{ env.PR_USERNAME }} Deployment is Completed. Cant approve your own pull request !"
          else
            gh pr review ${{ env.PR_NUMBER }} --approve --body "Pull Request Review by GitHub-Actions[Bot]
            ----
            @${{ env.PR_USERNAME }} Deployment is Completed, please review. Pull Request changes approved :white_check_mark:"
          fi
